
usart_lcd_adc_callback.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  000009ee  00000a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  00800126  00800126  00000aa8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000011f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000326  00000000  00000000  000012b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009f2  00000000  00000000  000015df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000414  00000000  00000000  00001fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b2e  00000000  00000000  000023e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000270  00000000  00000000  00002f14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003b4  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000000c2  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	79 c1       	rjmp	.+754    	; 0x2f6 <__vector_1>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	32 c1       	rjmp	.+612    	; 0x27c <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	7d c1       	rjmp	.+762    	; 0x320 <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ee ee       	ldi	r30, 0xEE	; 238
  48:	f9 e0       	ldi	r31, 0x09	; 9
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 32       	cpi	r26, 0x26	; 38
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a6 e2       	ldi	r26, 0x26	; 38
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ac 3b       	cpi	r26, 0xBC	; 188
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	04 d4       	rcall	.+2056   	; 0x870 <main>
  68:	c0 c4       	rjmp	.+2432   	; 0x9ea <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <Callbacks_Init>:
unsigned int TICK_CB[MAX_CALLBACKS];
// DECLARATION DES FONCTIONS INTERNES

// CONTENU DES FONCTIONS EXTERNES
void Callbacks_Init(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
 unsigned char i ;
 // INITIALISATION POUR VARIABLES CALLBACKS TIMER
 for (i = 0 ; i < MAX_CALLBACKS; i++)
  76:	19 82       	std	Y+1, r1	; 0x01
  78:	0d c0       	rjmp	.+26     	; 0x94 <Callbacks_Init+0x28>
 {
 My_CB[i] = 0;
  7a:	89 81       	ldd	r24, Y+1	; 0x01
  7c:	88 2f       	mov	r24, r24
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	88 0f       	add	r24, r24
  82:	99 1f       	adc	r25, r25
  84:	87 5d       	subi	r24, 0xD7	; 215
  86:	9e 4f       	sbci	r25, 0xFE	; 254
  88:	fc 01       	movw	r30, r24
  8a:	11 82       	std	Z+1, r1	; 0x01
  8c:	10 82       	st	Z, r1
// CONTENU DES FONCTIONS EXTERNES
void Callbacks_Init(void)
{
 unsigned char i ;
 // INITIALISATION POUR VARIABLES CALLBACKS TIMER
 for (i = 0 ; i < MAX_CALLBACKS; i++)
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	8f 5f       	subi	r24, 0xFF	; 255
  92:	89 83       	std	Y+1, r24	; 0x01
  94:	89 81       	ldd	r24, Y+1	; 0x01
  96:	8f 30       	cpi	r24, 0x0F	; 15
  98:	80 f3       	brcs	.-32     	; 0x7a <Callbacks_Init+0xe>
 {
 My_CB[i] = 0;
 //Time_CB[i] = 0;
 }
} 
  9a:	0f 90       	pop	r0
  9c:	cf 91       	pop	r28
  9e:	df 91       	pop	r29
  a0:	08 95       	ret

000000a2 <Callbacks_Record_Timer>:
// ENREGISTREMENT CALLBACKS TIMER
unsigned char Callbacks_Record_Timer(void(*pt_Function)(void), unsigned int Time)
{
  a2:	df 93       	push	r29
  a4:	cf 93       	push	r28
  a6:	00 d0       	rcall	.+0      	; 0xa8 <Callbacks_Record_Timer+0x6>
  a8:	00 d0       	rcall	.+0      	; 0xaa <Callbacks_Record_Timer+0x8>
  aa:	00 d0       	rcall	.+0      	; 0xac <Callbacks_Record_Timer+0xa>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	9c 83       	std	Y+4, r25	; 0x04
  b2:	8b 83       	std	Y+3, r24	; 0x03
  b4:	7e 83       	std	Y+6, r23	; 0x06
  b6:	6d 83       	std	Y+5, r22	; 0x05
 unsigned int i = 0;
  b8:	1a 82       	std	Y+2, r1	; 0x02
  ba:	19 82       	std	Y+1, r1	; 0x01
 while (My_CB[i] != 0 && i < MAX_CALLBACKS) i++;
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <Callbacks_Record_Timer+0x26>
  be:	89 81       	ldd	r24, Y+1	; 0x01
  c0:	9a 81       	ldd	r25, Y+2	; 0x02
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	9a 83       	std	Y+2, r25	; 0x02
  c6:	89 83       	std	Y+1, r24	; 0x01
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	9a 81       	ldd	r25, Y+2	; 0x02
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	87 5d       	subi	r24, 0xD7	; 215
  d2:	9e 4f       	sbci	r25, 0xFE	; 254
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	91 81       	ldd	r25, Z+1	; 0x01
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	29 f0       	breq	.+10     	; 0xe8 <Callbacks_Record_Timer+0x46>
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	9a 81       	ldd	r25, Y+2	; 0x02
  e2:	8f 30       	cpi	r24, 0x0F	; 15
  e4:	91 05       	cpc	r25, r1
  e6:	58 f3       	brcs	.-42     	; 0xbe <Callbacks_Record_Timer+0x1c>
 if (i < MAX_CALLBACKS)
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	9a 81       	ldd	r25, Y+2	; 0x02
  ec:	8f 30       	cpi	r24, 0x0F	; 15
  ee:	91 05       	cpc	r25, r1
  f0:	08 f5       	brcc	.+66     	; 0x134 <Callbacks_Record_Timer+0x92>
 {
 My_CB[i] = pt_Function;
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	87 5d       	subi	r24, 0xD7	; 215
  fc:	9e 4f       	sbci	r25, 0xFE	; 254
  fe:	2b 81       	ldd	r18, Y+3	; 0x03
 100:	3c 81       	ldd	r19, Y+4	; 0x04
 102:	fc 01       	movw	r30, r24
 104:	31 83       	std	Z+1, r19	; 0x01
 106:	20 83       	st	Z, r18
 Time_CB[i] = Time;
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	9a 81       	ldd	r25, Y+2	; 0x02
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	84 58       	subi	r24, 0x84	; 132
 112:	9e 4f       	sbci	r25, 0xFE	; 254
 114:	2d 81       	ldd	r18, Y+5	; 0x05
 116:	3e 81       	ldd	r19, Y+6	; 0x06
 118:	fc 01       	movw	r30, r24
 11a:	31 83       	std	Z+1, r19	; 0x01
 11c:	20 83       	st	Z, r18
 TICK_CB[i]= 0;
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	86 56       	subi	r24, 0x66	; 102
 128:	9e 4f       	sbci	r25, 0xFE	; 254
 12a:	fc 01       	movw	r30, r24
 12c:	11 82       	std	Z+1, r1	; 0x01
 12e:	10 82       	st	Z, r1
 return i;
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	01 c0       	rjmp	.+2      	; 0x136 <Callbacks_Record_Timer+0x94>
}
// IL N’Y A PLUS DE PLACE POUR ENREGISTRER UN CALLBACK
else return 255;
 134:	8f ef       	ldi	r24, 0xFF	; 255
}
 136:	26 96       	adiw	r28, 0x06	; 6
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
 142:	cf 91       	pop	r28
 144:	df 91       	pop	r29
 146:	08 95       	ret

00000148 <Callbacks_Remove_Timer>:

// RETIRER FONCTION DE RAPPEL
void Callbacks_Remove_Timer(unsigned char ID_CB)
{
 148:	df 93       	push	r29
 14a:	cf 93       	push	r28
 14c:	0f 92       	push	r0
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	89 83       	std	Y+1, r24	; 0x01
 if (ID_CB > 0 && ID_CB < MAX_CALLBACKS)
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	88 23       	and	r24, r24
 158:	69 f0       	breq	.+26     	; 0x174 <Callbacks_Remove_Timer+0x2c>
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	8f 30       	cpi	r24, 0x0F	; 15
 15e:	50 f4       	brcc	.+20     	; 0x174 <Callbacks_Remove_Timer+0x2c>
 {
 My_CB[ID_CB] = 0; 
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	87 5d       	subi	r24, 0xD7	; 215
 16c:	9e 4f       	sbci	r25, 0xFE	; 254
 16e:	fc 01       	movw	r30, r24
 170:	11 82       	std	Z+1, r1	; 0x01
 172:	10 82       	st	Z, r1
 //Time_CB[ID_CB] = 0;
}
}
 174:	0f 90       	pop	r0
 176:	cf 91       	pop	r28
 178:	df 91       	pop	r29
 17a:	08 95       	ret

0000017c <Callbacks_Record_USART>:

//USART


void Callbacks_Record_USART(void(*pt_Function)(char*))
{
 17c:	df 93       	push	r29
 17e:	cf 93       	push	r28
 180:	00 d0       	rcall	.+0      	; 0x182 <Callbacks_Record_USART+0x6>
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	9a 83       	std	Y+2, r25	; 0x02
 188:	89 83       	std	Y+1, r24	; 0x01
	  My_CB_USART = pt_Function;
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	90 93 49 01 	sts	0x0149, r25
 192:	80 93 48 01 	sts	0x0148, r24
}
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	cf 91       	pop	r28
 19c:	df 91       	pop	r29
 19e:	08 95       	ret

000001a0 <Callbacks_Remove_USART>:

void Callbacks_Remove_USART(void)
{
 1a0:	df 93       	push	r29
 1a2:	cf 93       	push	r28
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
	My_CB_USART= 0;
 1a8:	10 92 49 01 	sts	0x0149, r1
 1ac:	10 92 48 01 	sts	0x0148, r1
}
 1b0:	cf 91       	pop	r28
 1b2:	df 91       	pop	r29
 1b4:	08 95       	ret

000001b6 <callbacks_Start>:


// BOUCLE PRINCIPALE DE L’OS
void callbacks_Start(void)
{
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	0f 92       	push	r0
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
unsigned char idx;


// INITIALISATION DE TOUTES LES INTERRUPTIONS
sei();
 1c0:	78 94       	sei
// CONFIGURATION TIMER
TIMER0_Init_1ms();
 1c2:	83 d3       	rcall	.+1798   	; 0x8ca <TIMER0_Init_1ms>
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <callbacks_Start+0x16>
	lcd_init(LCD_DISP_ON);
	lcd_clrscr();
	lcd_puts("Salut, ca va bien ?");
 }
*/
}
 1c6:	00 00       	nop
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <callbacks_Start+0x16>
 1ca:	00 00       	nop
TIMER0_Init_1ms();
// BOUCLE INFINIE
while (1)
{
 // CHECK LES CONDITIONS POUR RAPPELER LES FONCTIONS LIEES AUTEMPS
 for (idx = 0 ; idx < MAX_CALLBACKS; idx++)
 1cc:	19 82       	std	Y+1, r1	; 0x01
 1ce:	3c c0       	rjmp	.+120    	; 0x248 <callbacks_Start+0x92>
 {
 if (My_CB[idx]) if (TICK_CB[idx] >= Time_CB[idx])
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	88 2f       	mov	r24, r24
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	87 5d       	subi	r24, 0xD7	; 215
 1dc:	9e 4f       	sbci	r25, 0xFE	; 254
 1de:	fc 01       	movw	r30, r24
 1e0:	80 81       	ld	r24, Z
 1e2:	91 81       	ldd	r25, Z+1	; 0x01
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	69 f1       	breq	.+90     	; 0x242 <callbacks_Start+0x8c>
 1e8:	89 81       	ldd	r24, Y+1	; 0x01
 1ea:	88 2f       	mov	r24, r24
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	86 56       	subi	r24, 0x66	; 102
 1f4:	9e 4f       	sbci	r25, 0xFE	; 254
 1f6:	fc 01       	movw	r30, r24
 1f8:	20 81       	ld	r18, Z
 1fa:	31 81       	ldd	r19, Z+1	; 0x01
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	88 2f       	mov	r24, r24
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	84 58       	subi	r24, 0x84	; 132
 208:	9e 4f       	sbci	r25, 0xFE	; 254
 20a:	fc 01       	movw	r30, r24
 20c:	80 81       	ld	r24, Z
 20e:	91 81       	ldd	r25, Z+1	; 0x01
 210:	28 17       	cp	r18, r24
 212:	39 07       	cpc	r19, r25
 214:	b0 f0       	brcs	.+44     	; 0x242 <callbacks_Start+0x8c>
 {
 TICK_CB[idx] = 0;
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	88 2f       	mov	r24, r24
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	86 56       	subi	r24, 0x66	; 102
 222:	9e 4f       	sbci	r25, 0xFE	; 254
 224:	fc 01       	movw	r30, r24
 226:	11 82       	std	Z+1, r1	; 0x01
 228:	10 82       	st	Z, r1
 My_CB[idx]();
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	88 2f       	mov	r24, r24
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	87 5d       	subi	r24, 0xD7	; 215
 236:	9e 4f       	sbci	r25, 0xFE	; 254
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	91 81       	ldd	r25, Z+1	; 0x01
 23e:	fc 01       	movw	r30, r24
 240:	09 95       	icall
TIMER0_Init_1ms();
// BOUCLE INFINIE
while (1)
{
 // CHECK LES CONDITIONS POUR RAPPELER LES FONCTIONS LIEES AUTEMPS
 for (idx = 0 ; idx < MAX_CALLBACKS; idx++)
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	89 83       	std	Y+1, r24	; 0x01
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	8f 30       	cpi	r24, 0x0F	; 15
 24c:	08 f2       	brcs	.-126    	; 0x1d0 <callbacks_Start+0x1a>
 TICK_CB[idx] = 0;
 My_CB[idx]();
 }
 }
 
 if(My_CB_USART && USART_reception_ok==TRUE) 
 24e:	80 91 48 01 	lds	r24, 0x0148
 252:	90 91 49 01 	lds	r25, 0x0149
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	09 f4       	brne	.+2      	; 0x25c <callbacks_Start+0xa6>
 25a:	b5 cf       	rjmp	.-150    	; 0x1c6 <callbacks_Start+0x10>
 25c:	80 91 27 01 	lds	r24, 0x0127
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	09 f0       	breq	.+2      	; 0x266 <callbacks_Start+0xb0>
 264:	b2 cf       	rjmp	.-156    	; 0x1ca <callbacks_Start+0x14>
 {
	  USART_reception_ok=FALSE;
 266:	10 92 27 01 	sts	0x0127, r1
	  My_CB_USART(buffer);
 26a:	20 91 48 01 	lds	r18, 0x0148
 26e:	30 91 49 01 	lds	r19, 0x0149
 272:	8a e4       	ldi	r24, 0x4A	; 74
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	f9 01       	movw	r30, r18
 278:	09 95       	icall
	lcd_init(LCD_DISP_ON);
	lcd_clrscr();
	lcd_puts("Salut, ca va bien ?");
 }
*/
}
 27a:	a8 cf       	rjmp	.-176    	; 0x1cc <callbacks_Start+0x16>

0000027c <__vector_11>:
// INTERRUPTIONS


// INTERRUPTION TIMER
ISR(TIMER1_COMPA_vect)
{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
 292:	df 93       	push	r29
 294:	cf 93       	push	r28
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
 // AJOURNER TOUS LES TICKS
 for ( tmp_int = 0 ; tmp_int < MAX_CALLBACKS; tmp_int++) TICK_CB[tmp_int]++;
 29a:	10 92 47 01 	sts	0x0147, r1
 29e:	1a c0       	rjmp	.+52     	; 0x2d4 <__vector_11+0x58>
 2a0:	80 91 47 01 	lds	r24, 0x0147
 2a4:	88 2f       	mov	r24, r24
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	9c 01       	movw	r18, r24
 2aa:	22 0f       	add	r18, r18
 2ac:	33 1f       	adc	r19, r19
 2ae:	26 56       	subi	r18, 0x66	; 102
 2b0:	3e 4f       	sbci	r19, 0xFE	; 254
 2b2:	f9 01       	movw	r30, r18
 2b4:	20 81       	ld	r18, Z
 2b6:	31 81       	ldd	r19, Z+1	; 0x01
 2b8:	2f 5f       	subi	r18, 0xFF	; 255
 2ba:	3f 4f       	sbci	r19, 0xFF	; 255
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	86 56       	subi	r24, 0x66	; 102
 2c2:	9e 4f       	sbci	r25, 0xFE	; 254
 2c4:	fc 01       	movw	r30, r24
 2c6:	31 83       	std	Z+1, r19	; 0x01
 2c8:	20 83       	st	Z, r18
 2ca:	80 91 47 01 	lds	r24, 0x0147
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 93 47 01 	sts	0x0147, r24
 2d4:	80 91 47 01 	lds	r24, 0x0147
 2d8:	8f 30       	cpi	r24, 0x0F	; 15
 2da:	10 f3       	brcs	.-60     	; 0x2a0 <__vector_11+0x24>
}
 2dc:	cf 91       	pop	r28
 2de:	df 91       	pop	r29
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <__vector_1>:

ISR(INT0_vect)
{
 2f6:	1f 92       	push	r1
 2f8:	0f 92       	push	r0
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	0f 92       	push	r0
 2fe:	11 24       	eor	r1, r1
 300:	8f 93       	push	r24
 302:	df 93       	push	r29
 304:	cf 93       	push	r28
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
	bouton_on=1;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 28 01 	sts	0x0128, r24
}
 310:	cf 91       	pop	r28
 312:	df 91       	pop	r29
 314:	8f 91       	pop	r24
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	0f 90       	pop	r0
 31c:	1f 90       	pop	r1
 31e:	18 95       	reti

00000320 <__vector_18>:

// Intéruption USART
ISR(USART_RX_vect)
{	
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	3f 93       	push	r19
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
 332:	ef 93       	push	r30
 334:	ff 93       	push	r31
 336:	df 93       	push	r29
 338:	cf 93       	push	r28
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
	buffer[emplacement]=UDR0;
 33e:	80 91 26 01 	lds	r24, 0x0126
 342:	88 2f       	mov	r24, r24
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	26 ec       	ldi	r18, 0xC6	; 198
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	f9 01       	movw	r30, r18
 34c:	20 81       	ld	r18, Z
 34e:	86 5b       	subi	r24, 0xB6	; 182
 350:	9e 4f       	sbci	r25, 0xFE	; 254
 352:	fc 01       	movw	r30, r24
 354:	20 83       	st	Z, r18
	if (buffer[emplacement]=='\r' || buffer[emplacement]==0 )
 356:	80 91 26 01 	lds	r24, 0x0126
 35a:	88 2f       	mov	r24, r24
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	86 5b       	subi	r24, 0xB6	; 182
 360:	9e 4f       	sbci	r25, 0xFE	; 254
 362:	fc 01       	movw	r30, r24
 364:	80 81       	ld	r24, Z
 366:	8d 30       	cpi	r24, 0x0D	; 13
 368:	51 f0       	breq	.+20     	; 0x37e <__vector_18+0x5e>
 36a:	80 91 26 01 	lds	r24, 0x0126
 36e:	88 2f       	mov	r24, r24
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	86 5b       	subi	r24, 0xB6	; 182
 374:	9e 4f       	sbci	r25, 0xFE	; 254
 376:	fc 01       	movw	r30, r24
 378:	80 81       	ld	r24, Z
 37a:	88 23       	and	r24, r24
 37c:	71 f4       	brne	.+28     	; 0x39a <__vector_18+0x7a>
	{
		buffer[emplacement]=0;
 37e:	80 91 26 01 	lds	r24, 0x0126
 382:	88 2f       	mov	r24, r24
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	86 5b       	subi	r24, 0xB6	; 182
 388:	9e 4f       	sbci	r25, 0xFE	; 254
 38a:	fc 01       	movw	r30, r24
 38c:	10 82       	st	Z, r1
		emplacement=0;
 38e:	10 92 26 01 	sts	0x0126, r1
		USART_reception_ok=TRUE;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	80 93 27 01 	sts	0x0127, r24
 398:	05 c0       	rjmp	.+10     	; 0x3a4 <__vector_18+0x84>
	}
	else if(emplacement++>=MAX_BUFFER);
 39a:	80 91 26 01 	lds	r24, 0x0126
 39e:	8f 5f       	subi	r24, 0xFF	; 255
 3a0:	80 93 26 01 	sts	0x0126, r24
}
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	ff 91       	pop	r31
 3aa:	ef 91       	pop	r30
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	3f 91       	pop	r19
 3b2:	2f 91       	pop	r18
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <hardware_Init>:
#include "lcd.h"
#include "USART.h"
#include "Hardware.h"

void hardware_Init()
{
 3be:	df 93       	push	r29
 3c0:	cf 93       	push	r28
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
	/* initialise Port Sortie */
	
	DDRD |=(1<<DDD7)|(1<<DDD6); //On initialise les bits 7 et 6 du DDRD à 1 pour les définir en output
 3c6:	8a e2       	ldi	r24, 0x2A	; 42
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	2a e2       	ldi	r18, 0x2A	; 42
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	f9 01       	movw	r30, r18
 3d0:	20 81       	ld	r18, Z
 3d2:	20 6c       	ori	r18, 0xC0	; 192
 3d4:	fc 01       	movw	r30, r24
 3d6:	20 83       	st	Z, r18
	PORTD |=(1<<PD7);
 3d8:	8b e2       	ldi	r24, 0x2B	; 43
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	2b e2       	ldi	r18, 0x2B	; 43
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	f9 01       	movw	r30, r18
 3e2:	20 81       	ld	r18, Z
 3e4:	20 68       	ori	r18, 0x80	; 128
 3e6:	fc 01       	movw	r30, r24
 3e8:	20 83       	st	Z, r18
	
	// Configuration de l'interruption
	
	EICRA |= (1<<ISC01); //set bit ISC01 in EICRA // interruption sur flanc descendant de INTO
 3ea:	89 e6       	ldi	r24, 0x69	; 105
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	29 e6       	ldi	r18, 0x69	; 105
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	f9 01       	movw	r30, r18
 3f4:	20 81       	ld	r18, Z
 3f6:	22 60       	ori	r18, 0x02	; 2
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
	EIMSK |= (1<<INT0); //set bit in port EIMSK // activation de l'interruption sur INT0
 3fc:	8d e3       	ldi	r24, 0x3D	; 61
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	2d e3       	ldi	r18, 0x3D	; 61
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	f9 01       	movw	r30, r18
 406:	20 81       	ld	r18, Z
 408:	21 60       	ori	r18, 0x01	; 1
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
	

 40e:	cf 91       	pop	r28
 410:	df 91       	pop	r29
 412:	08 95       	ret

00000414 <_delayFourCycles>:

/*************************************************************************
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
 414:	df 93       	push	r29
 416:	cf 93       	push	r28
 418:	00 d0       	rcall	.+0      	; 0x41a <_delayFourCycles+0x6>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	9a 83       	std	Y+2, r25	; 0x02
 420:	89 83       	std	Y+1, r24	; 0x01
    if ( __count == 0 )    
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	9a 81       	ldd	r25, Y+2	; 0x02
 426:	00 97       	sbiw	r24, 0x00	; 0
 428:	11 f4       	brne	.+4      	; 0x42e <_delayFourCycles+0x1a>
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 42a:	00 c0       	rjmp	.+0      	; 0x42c <_delayFourCycles+0x18>
 42c:	06 c0       	rjmp	.+12     	; 0x43a <_delayFourCycles+0x26>
    else
        __asm__ __volatile__ (
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	9a 81       	ldd	r25, Y+2	; 0x02
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <_delayFourCycles+0x1e>
 436:	9a 83       	std	Y+2, r25	; 0x02
 438:	89 83       	std	Y+1, r24	; 0x01
    	    "1: sbiw %0,1" "\n\t"                  
    	    "brne 1b"                              // 4 cycles/loop
    	    : "=w" (__count)
    	    : "0" (__count)
    	   );
}
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	cf 91       	pop	r28
 440:	df 91       	pop	r29
 442:	08 95       	ret

00000444 <toggle_e>:


#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
 444:	df 93       	push	r29
 446:	cf 93       	push	r28
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
    lcd_e_high();
 44c:	85 e2       	ldi	r24, 0x25	; 37
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	25 e2       	ldi	r18, 0x25	; 37
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	f9 01       	movw	r30, r18
 456:	20 81       	ld	r18, Z
 458:	20 62       	ori	r18, 0x20	; 32
 45a:	fc 01       	movw	r30, r24
 45c:	20 83       	st	Z, r18
    lcd_e_delay();
 45e:	00 c0       	rjmp	.+0      	; 0x460 <toggle_e+0x1c>
    lcd_e_low();
 460:	85 e2       	ldi	r24, 0x25	; 37
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	25 e2       	ldi	r18, 0x25	; 37
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	f9 01       	movw	r30, r18
 46a:	20 81       	ld	r18, Z
 46c:	2f 7d       	andi	r18, 0xDF	; 223
 46e:	fc 01       	movw	r30, r24
 470:	20 83       	st	Z, r18
}
 472:	cf 91       	pop	r28
 474:	df 91       	pop	r29
 476:	08 95       	ret

00000478 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 478:	df 93       	push	r29
 47a:	cf 93       	push	r28
 47c:	00 d0       	rcall	.+0      	; 0x47e <lcd_write+0x6>
 47e:	0f 92       	push	r0
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
 484:	8a 83       	std	Y+2, r24	; 0x02
 486:	6b 83       	std	Y+3, r22	; 0x03
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	88 23       	and	r24, r24
 48c:	51 f0       	breq	.+20     	; 0x4a2 <lcd_write+0x2a>
       lcd_rs_high();
 48e:	85 e2       	ldi	r24, 0x25	; 37
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	25 e2       	ldi	r18, 0x25	; 37
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	f9 01       	movw	r30, r18
 498:	20 81       	ld	r18, Z
 49a:	20 64       	ori	r18, 0x40	; 64
 49c:	fc 01       	movw	r30, r24
 49e:	20 83       	st	Z, r18
 4a0:	09 c0       	rjmp	.+18     	; 0x4b4 <lcd_write+0x3c>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 4a2:	85 e2       	ldi	r24, 0x25	; 37
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	25 e2       	ldi	r18, 0x25	; 37
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	f9 01       	movw	r30, r18
 4ac:	20 81       	ld	r18, Z
 4ae:	2f 7b       	andi	r18, 0xBF	; 191
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18
    }
    lcd_rw_low();
 4b4:	85 e2       	ldi	r24, 0x25	; 37
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	25 e2       	ldi	r18, 0x25	; 37
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	f9 01       	movw	r30, r18
 4be:	20 81       	ld	r18, Z
 4c0:	2f 77       	andi	r18, 0x7F	; 127
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 4c6:	84 e2       	ldi	r24, 0x24	; 36
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	24 e2       	ldi	r18, 0x24	; 36
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	f9 01       	movw	r30, r18
 4d0:	20 81       	ld	r18, Z
 4d2:	2f 60       	ori	r18, 0x0F	; 15
 4d4:	fc 01       	movw	r30, r24
 4d6:	20 83       	st	Z, r18

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 4d8:	85 e2       	ldi	r24, 0x25	; 37
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	fc 01       	movw	r30, r24
 4de:	80 81       	ld	r24, Z
 4e0:	80 7f       	andi	r24, 0xF0	; 240
 4e2:	89 83       	std	Y+1, r24	; 0x01
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 4e4:	85 e2       	ldi	r24, 0x25	; 37
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	2a 81       	ldd	r18, Y+2	; 0x02
 4ea:	22 95       	swap	r18
 4ec:	2f 70       	andi	r18, 0x0F	; 15
 4ee:	32 2f       	mov	r19, r18
 4f0:	29 81       	ldd	r18, Y+1	; 0x01
 4f2:	23 2b       	or	r18, r19
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
        lcd_e_toggle();
 4f8:	a5 df       	rcall	.-182    	; 0x444 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 4fa:	85 e2       	ldi	r24, 0x25	; 37
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	2a 81       	ldd	r18, Y+2	; 0x02
 500:	32 2f       	mov	r19, r18
 502:	3f 70       	andi	r19, 0x0F	; 15
 504:	29 81       	ldd	r18, Y+1	; 0x01
 506:	23 2b       	or	r18, r19
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18
        lcd_e_toggle();
 50c:	9b df       	rcall	.-202    	; 0x444 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 50e:	85 e2       	ldi	r24, 0x25	; 37
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	29 81       	ldd	r18, Y+1	; 0x01
 514:	2f 60       	ori	r18, 0x0F	; 15
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 51a:	0f 90       	pop	r0
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	cf 91       	pop	r28
 522:	df 91       	pop	r29
 524:	08 95       	ret

00000526 <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
 526:	df 93       	push	r29
 528:	cf 93       	push	r28
 52a:	00 d0       	rcall	.+0      	; 0x52c <lcd_read+0x6>
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62
 530:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data;
    
    
    if (rs)
 532:	8a 81       	ldd	r24, Y+2	; 0x02
 534:	88 23       	and	r24, r24
 536:	51 f0       	breq	.+20     	; 0x54c <lcd_read+0x26>
        lcd_rs_high();                       /* RS=1: read data      */
 538:	85 e2       	ldi	r24, 0x25	; 37
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	25 e2       	ldi	r18, 0x25	; 37
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	f9 01       	movw	r30, r18
 542:	20 81       	ld	r18, Z
 544:	20 64       	ori	r18, 0x40	; 64
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
 54a:	09 c0       	rjmp	.+18     	; 0x55e <lcd_read+0x38>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 54c:	85 e2       	ldi	r24, 0x25	; 37
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	25 e2       	ldi	r18, 0x25	; 37
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	f9 01       	movw	r30, r18
 556:	20 81       	ld	r18, Z
 558:	2f 7b       	andi	r18, 0xBF	; 191
 55a:	fc 01       	movw	r30, r24
 55c:	20 83       	st	Z, r18
    lcd_rw_high();                           /* RW=1  read mode      */
 55e:	85 e2       	ldi	r24, 0x25	; 37
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	25 e2       	ldi	r18, 0x25	; 37
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	f9 01       	movw	r30, r18
 568:	20 81       	ld	r18, Z
 56a:	20 68       	ori	r18, 0x80	; 128
 56c:	fc 01       	movw	r30, r24
 56e:	20 83       	st	Z, r18
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 570:	84 e2       	ldi	r24, 0x24	; 36
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	24 e2       	ldi	r18, 0x24	; 36
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	f9 01       	movw	r30, r18
 57a:	20 81       	ld	r18, Z
 57c:	20 7f       	andi	r18, 0xF0	; 240
 57e:	fc 01       	movw	r30, r24
 580:	20 83       	st	Z, r18
        
        lcd_e_high();
 582:	85 e2       	ldi	r24, 0x25	; 37
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	25 e2       	ldi	r18, 0x25	; 37
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	f9 01       	movw	r30, r18
 58c:	20 81       	ld	r18, Z
 58e:	20 62       	ori	r18, 0x20	; 32
 590:	fc 01       	movw	r30, r24
 592:	20 83       	st	Z, r18
        lcd_e_delay();        
 594:	00 c0       	rjmp	.+0      	; 0x596 <lcd_read+0x70>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 596:	83 e2       	ldi	r24, 0x23	; 35
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	fc 01       	movw	r30, r24
 59c:	80 81       	ld	r24, Z
 59e:	82 95       	swap	r24
 5a0:	80 7f       	andi	r24, 0xF0	; 240
 5a2:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
 5a4:	85 e2       	ldi	r24, 0x25	; 37
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	25 e2       	ldi	r18, 0x25	; 37
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	f9 01       	movw	r30, r18
 5ae:	20 81       	ld	r18, Z
 5b0:	2f 7d       	andi	r18, 0xDF	; 223
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
        
        lcd_e_delay();                       /* Enable 500ns low       */
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <lcd_read+0x92>
        
        lcd_e_high();
 5b8:	85 e2       	ldi	r24, 0x25	; 37
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	25 e2       	ldi	r18, 0x25	; 37
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	f9 01       	movw	r30, r18
 5c2:	20 81       	ld	r18, Z
 5c4:	20 62       	ori	r18, 0x20	; 32
 5c6:	fc 01       	movw	r30, r24
 5c8:	20 83       	st	Z, r18
        lcd_e_delay();
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <lcd_read+0xa6>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 5cc:	83 e2       	ldi	r24, 0x23	; 35
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	fc 01       	movw	r30, r24
 5d2:	80 81       	ld	r24, Z
 5d4:	98 2f       	mov	r25, r24
 5d6:	9f 70       	andi	r25, 0x0F	; 15
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
 5da:	89 2b       	or	r24, r25
 5dc:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
 5de:	85 e2       	ldi	r24, 0x25	; 37
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	25 e2       	ldi	r18, 0x25	; 37
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	f9 01       	movw	r30, r18
 5e8:	20 81       	ld	r18, Z
 5ea:	2f 7d       	andi	r18, 0xDF	; 223
 5ec:	fc 01       	movw	r30, r24
 5ee:	20 83       	st	Z, r18
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
 5f0:	89 81       	ldd	r24, Y+1	; 0x01
}
 5f2:	0f 90       	pop	r0
 5f4:	0f 90       	pop	r0
 5f6:	cf 91       	pop	r28
 5f8:	df 91       	pop	r29
 5fa:	08 95       	ret

000005fc <lcd_waitbusy>:
/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
 5fc:	1f 93       	push	r17
 5fe:	df 93       	push	r29
 600:	cf 93       	push	r28
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	8e df       	rcall	.-228    	; 0x526 <lcd_read>
 60a:	18 2f       	mov	r17, r24
 60c:	81 2f       	mov	r24, r17
 60e:	88 23       	and	r24, r24
 610:	d4 f3       	brlt	.-12     	; 0x606 <lcd_waitbusy+0xa>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	fe de       	rcall	.-516    	; 0x414 <_delayFourCycles>

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	85 df       	rcall	.-246    	; 0x526 <lcd_read>
    
}/* lcd_waitbusy */
 61c:	cf 91       	pop	r28
 61e:	df 91       	pop	r29
 620:	1f 91       	pop	r17
 622:	08 95       	ret

00000624 <lcd_newline>:
/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
 624:	1f 93       	push	r17
 626:	df 93       	push	r29
 628:	cf 93       	push	r28
 62a:	0f 92       	push	r0
 62c:	cd b7       	in	r28, 0x3d	; 61
 62e:	de b7       	in	r29, 0x3e	; 62
 630:	89 83       	std	Y+1, r24	; 0x01

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	80 34       	cpi	r24, 0x40	; 64
 636:	10 f4       	brcc	.+4      	; 0x63c <lcd_newline+0x18>
        addressCounter = LCD_START_LINE2;
 638:	10 e4       	ldi	r17, 0x40	; 64
 63a:	01 c0       	rjmp	.+2      	; 0x63e <lcd_newline+0x1a>
    else
        addressCounter = LCD_START_LINE1;
 63c:	10 e0       	ldi	r17, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 63e:	81 2f       	mov	r24, r17
 640:	80 58       	subi	r24, 0x80	; 128
 642:	05 d0       	rcall	.+10     	; 0x64e <lcd_command>

}/* lcd_newline */
 644:	0f 90       	pop	r0
 646:	cf 91       	pop	r28
 648:	df 91       	pop	r29
 64a:	1f 91       	pop	r17
 64c:	08 95       	ret

0000064e <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 64e:	df 93       	push	r29
 650:	cf 93       	push	r28
 652:	0f 92       	push	r0
 654:	cd b7       	in	r28, 0x3d	; 61
 656:	de b7       	in	r29, 0x3e	; 62
 658:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
 65a:	d0 df       	rcall	.-96     	; 0x5fc <lcd_waitbusy>
    lcd_write(cmd,0);
 65c:	89 81       	ldd	r24, Y+1	; 0x01
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	0b df       	rcall	.-490    	; 0x478 <lcd_write>
}
 662:	0f 90       	pop	r0
 664:	cf 91       	pop	r28
 666:	df 91       	pop	r29
 668:	08 95       	ret

0000066a <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 66a:	df 93       	push	r29
 66c:	cf 93       	push	r28
 66e:	0f 92       	push	r0
 670:	cd b7       	in	r28, 0x3d	; 61
 672:	de b7       	in	r29, 0x3e	; 62
 674:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
 676:	c2 df       	rcall	.-124    	; 0x5fc <lcd_waitbusy>
    lcd_write(data,1);
 678:	89 81       	ldd	r24, Y+1	; 0x01
 67a:	61 e0       	ldi	r22, 0x01	; 1
 67c:	fd de       	rcall	.-518    	; 0x478 <lcd_write>
}
 67e:	0f 90       	pop	r0
 680:	cf 91       	pop	r28
 682:	df 91       	pop	r29
 684:	08 95       	ret

00000686 <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
 686:	df 93       	push	r29
 688:	cf 93       	push	r28
 68a:	00 d0       	rcall	.+0      	; 0x68c <lcd_gotoxy+0x6>
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 694:	8a 81       	ldd	r24, Y+2	; 0x02
 696:	88 23       	and	r24, r24
 698:	21 f4       	brne	.+8      	; 0x6a2 <lcd_gotoxy+0x1c>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 69a:	89 81       	ldd	r24, Y+1	; 0x01
 69c:	80 58       	subi	r24, 0x80	; 128
 69e:	d7 df       	rcall	.-82     	; 0x64e <lcd_command>
 6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <lcd_gotoxy+0x22>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 6a2:	89 81       	ldd	r24, Y+1	; 0x01
 6a4:	80 54       	subi	r24, 0x40	; 64
 6a6:	d3 df       	rcall	.-90     	; 0x64e <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	cf 91       	pop	r28
 6ae:	df 91       	pop	r29
 6b0:	08 95       	ret

000006b2 <lcd_getxy>:


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
 6b2:	df 93       	push	r29
 6b4:	cf 93       	push	r28
 6b6:	cd b7       	in	r28, 0x3d	; 61
 6b8:	de b7       	in	r29, 0x3e	; 62
    return lcd_waitbusy();
 6ba:	a0 df       	rcall	.-192    	; 0x5fc <lcd_waitbusy>
 6bc:	88 2f       	mov	r24, r24
 6be:	90 e0       	ldi	r25, 0x00	; 0
}
 6c0:	cf 91       	pop	r28
 6c2:	df 91       	pop	r29
 6c4:	08 95       	ret

000006c6 <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
 6c6:	df 93       	push	r29
 6c8:	cf 93       	push	r28
 6ca:	cd b7       	in	r28, 0x3d	; 61
 6cc:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_CLR);
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	be df       	rcall	.-132    	; 0x64e <lcd_command>
}
 6d2:	cf 91       	pop	r28
 6d4:	df 91       	pop	r29
 6d6:	08 95       	ret

000006d8 <lcd_home>:

/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
 6d8:	df 93       	push	r29
 6da:	cf 93       	push	r28
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_HOME);
 6e0:	82 e0       	ldi	r24, 0x02	; 2
 6e2:	b5 df       	rcall	.-150    	; 0x64e <lcd_command>
}
 6e4:	cf 91       	pop	r28
 6e6:	df 91       	pop	r29
 6e8:	08 95       	ret

000006ea <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 6ea:	df 93       	push	r29
 6ec:	cf 93       	push	r28
 6ee:	00 d0       	rcall	.+0      	; 0x6f0 <lcd_putc+0x6>
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 6f6:	82 df       	rcall	.-252    	; 0x5fc <lcd_waitbusy>
 6f8:	89 83       	std	Y+1, r24	; 0x01
    if (c=='\n')
 6fa:	8a 81       	ldd	r24, Y+2	; 0x02
 6fc:	8a 30       	cpi	r24, 0x0A	; 10
 6fe:	19 f4       	brne	.+6      	; 0x706 <lcd_putc+0x1c>
    {
        lcd_newline(pos);
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	90 df       	rcall	.-224    	; 0x624 <lcd_newline>
 704:	03 c0       	rjmp	.+6      	; 0x70c <lcd_putc+0x22>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	61 e0       	ldi	r22, 0x01	; 1
 70a:	b6 de       	rcall	.-660    	; 0x478 <lcd_write>
    }

}/* lcd_putc */
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	cf 91       	pop	r28
 712:	df 91       	pop	r29
 714:	08 95       	ret

00000716 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 716:	1f 93       	push	r17
 718:	df 93       	push	r29
 71a:	cf 93       	push	r28
 71c:	00 d0       	rcall	.+0      	; 0x71e <lcd_puts+0x8>
 71e:	cd b7       	in	r28, 0x3d	; 61
 720:	de b7       	in	r29, 0x3e	; 62
 722:	9a 83       	std	Y+2, r25	; 0x02
 724:	89 83       	std	Y+1, r24	; 0x01
    register char c;

    while ( (c = *s++) ) {
 726:	02 c0       	rjmp	.+4      	; 0x72c <lcd_puts+0x16>
        lcd_putc(c);
 728:	81 2f       	mov	r24, r17
 72a:	df df       	rcall	.-66     	; 0x6ea <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 72c:	89 81       	ldd	r24, Y+1	; 0x01
 72e:	9a 81       	ldd	r25, Y+2	; 0x02
 730:	fc 01       	movw	r30, r24
 732:	10 81       	ld	r17, Z
 734:	21 e0       	ldi	r18, 0x01	; 1
 736:	11 23       	and	r17, r17
 738:	09 f4       	brne	.+2      	; 0x73c <lcd_puts+0x26>
 73a:	20 e0       	ldi	r18, 0x00	; 0
 73c:	89 81       	ldd	r24, Y+1	; 0x01
 73e:	9a 81       	ldd	r25, Y+2	; 0x02
 740:	01 96       	adiw	r24, 0x01	; 1
 742:	9a 83       	std	Y+2, r25	; 0x02
 744:	89 83       	std	Y+1, r24	; 0x01
 746:	22 23       	and	r18, r18
 748:	79 f7       	brne	.-34     	; 0x728 <lcd_puts+0x12>
        lcd_putc(c);
    }

}/* lcd_puts */
 74a:	0f 90       	pop	r0
 74c:	0f 90       	pop	r0
 74e:	cf 91       	pop	r28
 750:	df 91       	pop	r29
 752:	1f 91       	pop	r17
 754:	08 95       	ret

00000756 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 756:	1f 93       	push	r17
 758:	df 93       	push	r29
 75a:	cf 93       	push	r28
 75c:	00 d0       	rcall	.+0      	; 0x75e <lcd_puts_p+0x8>
 75e:	00 d0       	rcall	.+0      	; 0x760 <lcd_puts_p+0xa>
 760:	0f 92       	push	r0
 762:	cd b7       	in	r28, 0x3d	; 61
 764:	de b7       	in	r29, 0x3e	; 62
 766:	9d 83       	std	Y+5, r25	; 0x05
 768:	8c 83       	std	Y+4, r24	; 0x04
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 76a:	02 c0       	rjmp	.+4      	; 0x770 <lcd_puts_p+0x1a>
        lcd_putc(c);
 76c:	81 2f       	mov	r24, r17
 76e:	bd df       	rcall	.-134    	; 0x6ea <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 770:	8c 81       	ldd	r24, Y+4	; 0x04
 772:	9d 81       	ldd	r25, Y+5	; 0x05
 774:	9a 83       	std	Y+2, r25	; 0x02
 776:	89 83       	std	Y+1, r24	; 0x01
 778:	8c 81       	ldd	r24, Y+4	; 0x04
 77a:	9d 81       	ldd	r25, Y+5	; 0x05
 77c:	01 96       	adiw	r24, 0x01	; 1
 77e:	9d 83       	std	Y+5, r25	; 0x05
 780:	8c 83       	std	Y+4, r24	; 0x04
 782:	89 81       	ldd	r24, Y+1	; 0x01
 784:	9a 81       	ldd	r25, Y+2	; 0x02
 786:	fc 01       	movw	r30, r24
 788:	14 91       	lpm	r17, Z+
 78a:	1b 83       	std	Y+3, r17	; 0x03
 78c:	8b 81       	ldd	r24, Y+3	; 0x03
 78e:	18 2f       	mov	r17, r24
 790:	11 23       	and	r17, r17
 792:	61 f7       	brne	.-40     	; 0x76c <lcd_puts_p+0x16>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 794:	0f 90       	pop	r0
 796:	0f 90       	pop	r0
 798:	0f 90       	pop	r0
 79a:	0f 90       	pop	r0
 79c:	0f 90       	pop	r0
 79e:	cf 91       	pop	r28
 7a0:	df 91       	pop	r29
 7a2:	1f 91       	pop	r17
 7a4:	08 95       	ret

000007a6 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 7a6:	df 93       	push	r29
 7a8:	cf 93       	push	r28
 7aa:	0f 92       	push	r0
 7ac:	cd b7       	in	r28, 0x3d	; 61
 7ae:	de b7       	in	r29, 0x3e	; 62
 7b0:	89 83       	std	Y+1, r24	; 0x01
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 7b2:	84 e2       	ldi	r24, 0x24	; 36
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	24 e2       	ldi	r18, 0x24	; 36
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	f9 01       	movw	r30, r18
 7bc:	20 81       	ld	r18, Z
 7be:	2f 60       	ori	r18, 0x0F	; 15
 7c0:	fc 01       	movw	r30, r24
 7c2:	20 83       	st	Z, r18
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 7c4:	84 e2       	ldi	r24, 0x24	; 36
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	24 e2       	ldi	r18, 0x24	; 36
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	f9 01       	movw	r30, r18
 7ce:	20 81       	ld	r18, Z
 7d0:	20 64       	ori	r18, 0x40	; 64
 7d2:	fc 01       	movw	r30, r24
 7d4:	20 83       	st	Z, r18
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 7d6:	84 e2       	ldi	r24, 0x24	; 36
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	24 e2       	ldi	r18, 0x24	; 36
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	f9 01       	movw	r30, r18
 7e0:	20 81       	ld	r18, Z
 7e2:	20 68       	ori	r18, 0x80	; 128
 7e4:	fc 01       	movw	r30, r24
 7e6:	20 83       	st	Z, r18
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 7e8:	84 e2       	ldi	r24, 0x24	; 36
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	24 e2       	ldi	r18, 0x24	; 36
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	f9 01       	movw	r30, r18
 7f2:	20 81       	ld	r18, Z
 7f4:	20 62       	ori	r18, 0x20	; 32
 7f6:	fc 01       	movw	r30, r24
 7f8:	20 83       	st	Z, r18
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
 7fa:	80 ea       	ldi	r24, 0xA0	; 160
 7fc:	9f e0       	ldi	r25, 0x0F	; 15
 7fe:	0a de       	rcall	.-1004   	; 0x414 <_delayFourCycles>
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 800:	85 e2       	ldi	r24, 0x25	; 37
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	25 e2       	ldi	r18, 0x25	; 37
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	f9 01       	movw	r30, r18
 80a:	20 81       	ld	r18, Z
 80c:	22 60       	ori	r18, 0x02	; 2
 80e:	fc 01       	movw	r30, r24
 810:	20 83       	st	Z, r18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 812:	85 e2       	ldi	r24, 0x25	; 37
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	25 e2       	ldi	r18, 0x25	; 37
 818:	30 e0       	ldi	r19, 0x00	; 0
 81a:	f9 01       	movw	r30, r18
 81c:	20 81       	ld	r18, Z
 81e:	21 60       	ori	r18, 0x01	; 1
 820:	fc 01       	movw	r30, r24
 822:	20 83       	st	Z, r18
    lcd_e_toggle();
 824:	0f de       	rcall	.-994    	; 0x444 <toggle_e>
    delay(4992);         /* delay, busy flag can't be checked here */
 826:	80 ee       	ldi	r24, 0xE0	; 224
 828:	94 e0       	ldi	r25, 0x04	; 4
 82a:	f4 dd       	rcall	.-1048   	; 0x414 <_delayFourCycles>
   
    /* repeat last command */ 
    lcd_e_toggle();      
 82c:	0b de       	rcall	.-1002   	; 0x444 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
 82e:	80 e1       	ldi	r24, 0x10	; 16
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	f0 dd       	rcall	.-1056   	; 0x414 <_delayFourCycles>
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 834:	07 de       	rcall	.-1010   	; 0x444 <toggle_e>
    delay(64);           /* delay, busy flag can't be checked here */
 836:	80 e1       	ldi	r24, 0x10	; 16
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	ec dd       	rcall	.-1064   	; 0x414 <_delayFourCycles>

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 83c:	85 e2       	ldi	r24, 0x25	; 37
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	25 e2       	ldi	r18, 0x25	; 37
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	f9 01       	movw	r30, r18
 846:	20 81       	ld	r18, Z
 848:	2e 7f       	andi	r18, 0xFE	; 254
 84a:	fc 01       	movw	r30, r24
 84c:	20 83       	st	Z, r18
    lcd_e_toggle();
 84e:	fa dd       	rcall	.-1036   	; 0x444 <toggle_e>
    delay(64);           /* some displays need this additional delay */
 850:	80 e1       	ldi	r24, 0x10	; 16
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	df dd       	rcall	.-1090   	; 0x414 <_delayFourCycles>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 856:	88 e2       	ldi	r24, 0x28	; 40
 858:	fa de       	rcall	.-524    	; 0x64e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 85a:	88 e0       	ldi	r24, 0x08	; 8
 85c:	f8 de       	rcall	.-528    	; 0x64e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 85e:	33 df       	rcall	.-410    	; 0x6c6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 860:	86 e0       	ldi	r24, 0x06	; 6
 862:	f5 de       	rcall	.-534    	; 0x64e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 864:	89 81       	ldd	r24, Y+1	; 0x01
 866:	f3 de       	rcall	.-538    	; 0x64e <lcd_command>

}/* lcd_init */
 868:	0f 90       	pop	r0
 86a:	cf 91       	pop	r28
 86c:	df 91       	pop	r29
 86e:	08 95       	ret

00000870 <main>:
//extern volatile char buffer[MAX_BUFFER];
// FONCTIONS DONT ON PASSE LES ADRESSES A callbacks.c POUR QU’ELLES PUISSENT
// ÊTRE RAPPELEES TOUTES LES X MS
// FONCTION PRINCIPALE
int main(void)
{
 870:	df 93       	push	r29
 872:	cf 93       	push	r28
 874:	cd b7       	in	r28, 0x3d	; 61
 876:	de b7       	in	r29, 0x3e	; 62
 // INITIALISATION HARDWARE
 hardware_Init() ; 
 878:	a2 dd       	rcall	.-1212   	; 0x3be <hardware_Init>
 //INITIALISATION CALLBACKS
 Callbacks_Init() ;
 87a:	f8 db       	rcall	.-2064   	; 0x6c <Callbacks_Init>
 USART_Init_9600();
 87c:	7b d0       	rcall	.+246    	; 0x974 <USART_Init_9600>
 lcd_init(LCD_DISP_ON);
 87e:	8c e0       	ldi	r24, 0x0C	; 12
 880:	92 df       	rcall	.-220    	; 0x7a6 <lcd_init>
 lcd_clrscr();
 882:	21 df       	rcall	.-446    	; 0x6c6 <lcd_clrscr>
 lcd_puts("Salut, ca va bien ?");
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	91 e0       	ldi	r25, 0x01	; 1
 888:	46 df       	rcall	.-372    	; 0x716 <lcd_puts>
  lcd_clrscr();
 88a:	1d df       	rcall	.-454    	; 0x6c6 <lcd_clrscr>
 lcd_puts("bien bien");
 88c:	85 e1       	ldi	r24, 0x15	; 21
 88e:	91 e0       	ldi	r25, 0x01	; 1
 890:	42 df       	rcall	.-380    	; 0x716 <lcd_puts>
 
 Usart_Tx_String("salut");
 892:	8f e1       	ldi	r24, 0x1F	; 31
 894:	91 e0       	ldi	r25, 0x01	; 1
 896:	47 d0       	rcall	.+142    	; 0x926 <Usart_Tx_String>
 
 Callbacks_Record_USART(affichage_USART);
 898:	85 e5       	ldi	r24, 0x55	; 85
 89a:	94 e0       	ldi	r25, 0x04	; 4
 89c:	6f dc       	rcall	.-1826   	; 0x17c <Callbacks_Record_USART>
 callbacks_Start();
 89e:	8b dc       	rcall	.-1770   	; 0x1b6 <callbacks_Start>
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 // N’ARRIVE JAMAIS ICI
}
 8a4:	cf 91       	pop	r28
 8a6:	df 91       	pop	r29
 8a8:	08 95       	ret

000008aa <affichage_USART>:
}
*/


void affichage_USART(char *trame)
{
 8aa:	df 93       	push	r29
 8ac:	cf 93       	push	r28
 8ae:	00 d0       	rcall	.+0      	; 0x8b0 <affichage_USART+0x6>
 8b0:	cd b7       	in	r28, 0x3d	; 61
 8b2:	de b7       	in	r29, 0x3e	; 62
 8b4:	9a 83       	std	Y+2, r25	; 0x02
 8b6:	89 83       	std	Y+1, r24	; 0x01
	lcd_clrscr();
 8b8:	06 df       	rcall	.-500    	; 0x6c6 <lcd_clrscr>
	lcd_puts(trame);
 8ba:	89 81       	ldd	r24, Y+1	; 0x01
 8bc:	9a 81       	ldd	r25, Y+2	; 0x02
 8be:	2b df       	rcall	.-426    	; 0x716 <lcd_puts>
	
}
 8c0:	0f 90       	pop	r0
 8c2:	0f 90       	pop	r0
 8c4:	cf 91       	pop	r28
 8c6:	df 91       	pop	r29
 8c8:	08 95       	ret

000008ca <TIMER0_Init_1ms>:

//CONTENU FONCTIONS EXTERNES


void TIMER0_Init_1ms(void)
{
 8ca:	df 93       	push	r29
 8cc:	cf 93       	push	r28
 8ce:	cd b7       	in	r28, 0x3d	; 61
 8d0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |=(1<<WGM12)|(1<<CS12);//|(1<<CS10);
 8d2:	81 e8       	ldi	r24, 0x81	; 129
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	21 e8       	ldi	r18, 0x81	; 129
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	f9 01       	movw	r30, r18
 8dc:	20 81       	ld	r18, Z
 8de:	2c 60       	ori	r18, 0x0C	; 12
 8e0:	fc 01       	movw	r30, r24
 8e2:	20 83       	st	Z, r18
	OCR1AL = 0b00000001;
 8e4:	88 e8       	ldi	r24, 0x88	; 136
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	21 e0       	ldi	r18, 0x01	; 1
 8ea:	fc 01       	movw	r30, r24
 8ec:	20 83       	st	Z, r18
	TIMSK1 |=(1<<OCIE1A);
 8ee:	8f e6       	ldi	r24, 0x6F	; 111
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	2f e6       	ldi	r18, 0x6F	; 111
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	f9 01       	movw	r30, r18
 8f8:	20 81       	ld	r18, Z
 8fa:	22 60       	ori	r18, 0x02	; 2
 8fc:	fc 01       	movw	r30, r24
 8fe:	20 83       	st	Z, r18
	


}
 900:	cf 91       	pop	r28
 902:	df 91       	pop	r29
 904:	08 95       	ret

00000906 <Usart_Tx>:


//CONTENU FONCTIONS EXTERNES

void Usart_Tx(char data)
{
 906:	df 93       	push	r29
 908:	cf 93       	push	r28
 90a:	0f 92       	push	r0
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
 910:	89 83       	std	Y+1, r24	; 0x01
    // UDRE Flag , is the transmit buffer UDR) ready to receive new data ?
	// if UDRE0 =1 the buffer is empty
	USART_Delay();
 912:	59 d0       	rcall	.+178    	; 0x9c6 <USART_Delay>
    UDR0 = data;
 914:	86 ec       	ldi	r24, 0xC6	; 198
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	29 81       	ldd	r18, Y+1	; 0x01
 91a:	fc 01       	movw	r30, r24
 91c:	20 83       	st	Z, r18
}
 91e:	0f 90       	pop	r0
 920:	cf 91       	pop	r28
 922:	df 91       	pop	r29
 924:	08 95       	ret

00000926 <Usart_Tx_String>:


void Usart_Tx_String(char *String)
{
 926:	df 93       	push	r29
 928:	cf 93       	push	r28
 92a:	00 d0       	rcall	.+0      	; 0x92c <Usart_Tx_String+0x6>
 92c:	0f 92       	push	r0
 92e:	cd b7       	in	r28, 0x3d	; 61
 930:	de b7       	in	r29, 0x3e	; 62
 932:	9b 83       	std	Y+3, r25	; 0x03
 934:	8a 83       	std	Y+2, r24	; 0x02
	char Continue = TRUE;
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	89 83       	std	Y+1, r24	; 0x01
	while (Continue)
 93a:	13 c0       	rjmp	.+38     	; 0x962 <Usart_Tx_String+0x3c>
	{
		if(*String==0) Continue = FALSE;
 93c:	8a 81       	ldd	r24, Y+2	; 0x02
 93e:	9b 81       	ldd	r25, Y+3	; 0x03
 940:	fc 01       	movw	r30, r24
 942:	80 81       	ld	r24, Z
 944:	88 23       	and	r24, r24
 946:	11 f4       	brne	.+4      	; 0x94c <Usart_Tx_String+0x26>
 948:	19 82       	std	Y+1, r1	; 0x01
 94a:	0b c0       	rjmp	.+22     	; 0x962 <Usart_Tx_String+0x3c>
		else 
		{
		Usart_Tx(*String++);		
 94c:	8a 81       	ldd	r24, Y+2	; 0x02
 94e:	9b 81       	ldd	r25, Y+3	; 0x03
 950:	fc 01       	movw	r30, r24
 952:	20 81       	ld	r18, Z
 954:	8a 81       	ldd	r24, Y+2	; 0x02
 956:	9b 81       	ldd	r25, Y+3	; 0x03
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	9b 83       	std	Y+3, r25	; 0x03
 95c:	8a 83       	std	Y+2, r24	; 0x02
 95e:	82 2f       	mov	r24, r18
 960:	d2 df       	rcall	.-92     	; 0x906 <Usart_Tx>


void Usart_Tx_String(char *String)
{
	char Continue = TRUE;
	while (Continue)
 962:	89 81       	ldd	r24, Y+1	; 0x01
 964:	88 23       	and	r24, r24
 966:	51 f7       	brne	.-44     	; 0x93c <Usart_Tx_String+0x16>
		else 
		{
		Usart_Tx(*String++);		
		}
	}	
}
 968:	0f 90       	pop	r0
 96a:	0f 90       	pop	r0
 96c:	0f 90       	pop	r0
 96e:	cf 91       	pop	r28
 970:	df 91       	pop	r29
 972:	08 95       	ret

00000974 <USART_Init_9600>:




void USART_Init_9600()
{
 974:	df 93       	push	r29
 976:	cf 93       	push	r28
 978:	cd b7       	in	r28, 0x3d	; 61
 97a:	de b7       	in	r29, 0x3e	; 62
// fréquence horloge = 1000000 hz, Si Baudrate = 9600 alors UBRR = 12
	//1xspeed  U2X0 = 1  
	UCSR0A |= (1<<U2X0);
 97c:	80 ec       	ldi	r24, 0xC0	; 192
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	20 ec       	ldi	r18, 0xC0	; 192
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	f9 01       	movw	r30, r18
 986:	20 81       	ld	r18, Z
 988:	22 60       	ori	r18, 0x02	; 2
 98a:	fc 01       	movw	r30, r24
 98c:	20 83       	st	Z, r18

	// 9600 baud
	//UBRR0H = 0x00;
	//UBRR0L = 0x0C;
	UBRR0 = 12;
 98e:	84 ec       	ldi	r24, 0xC4	; 196
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	2c e0       	ldi	r18, 0x0C	; 12
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	fc 01       	movw	r30, r24
 998:	31 83       	std	Z+1, r19	; 0x01
 99a:	20 83       	st	Z, r18

		// Configuration 
	UCSR0B |= (1<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<RXB80)|(0<<TXB80);
 99c:	81 ec       	ldi	r24, 0xC1	; 193
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	21 ec       	ldi	r18, 0xC1	; 193
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	f9 01       	movw	r30, r18
 9a6:	20 81       	ld	r18, Z
 9a8:	28 69       	ori	r18, 0x98	; 152
 9aa:	fc 01       	movw	r30, r24
 9ac:	20 83       	st	Z, r18

	// Async. mode, 8 bits, 1 bit de stop, pas de contrôle de parité
   	UCSR0C |= (0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0);
 9ae:	82 ec       	ldi	r24, 0xC2	; 194
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	22 ec       	ldi	r18, 0xC2	; 194
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	f9 01       	movw	r30, r18
 9b8:	20 81       	ld	r18, Z
 9ba:	26 60       	ori	r18, 0x06	; 6
 9bc:	fc 01       	movw	r30, r24
 9be:	20 83       	st	Z, r18
	
}
 9c0:	cf 91       	pop	r28
 9c2:	df 91       	pop	r29
 9c4:	08 95       	ret

000009c6 <USART_Delay>:

void USART_Delay()
{
 9c6:	df 93       	push	r29
 9c8:	cf 93       	push	r28
 9ca:	cd b7       	in	r28, 0x3d	; 61
 9cc:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSR0A & (1<<UDRE0)));
 9ce:	00 00       	nop
 9d0:	80 ec       	ldi	r24, 0xC0	; 192
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	fc 01       	movw	r30, r24
 9d6:	80 81       	ld	r24, Z
 9d8:	88 2f       	mov	r24, r24
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	80 72       	andi	r24, 0x20	; 32
 9de:	90 70       	andi	r25, 0x00	; 0
 9e0:	00 97       	sbiw	r24, 0x00	; 0
 9e2:	b1 f3       	breq	.-20     	; 0x9d0 <USART_Delay+0xa>
}
 9e4:	cf 91       	pop	r28
 9e6:	df 91       	pop	r29
 9e8:	08 95       	ret

000009ea <_exit>:
 9ea:	f8 94       	cli

000009ec <__stop_program>:
 9ec:	ff cf       	rjmp	.-2      	; 0x9ec <__stop_program>
